///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright © NetworkDLS 2002, All rights reserved
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef _EVENTLOG_CPP
#define _EVENTLOG_CPP
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Windows.H>
#include <Stdio.H>
#include <Stdlib.H>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define _EVENT_LOG_BUILD 1

#include "EventLog.H"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool RecordSuccessAudit(const char *sEventName, const char *sMsg)
{
	return RecordEvent(sEventName, EVENTLOG_AUDIT_SUCCESS, MSG_BASIC_INFORMATION, 0, sMsg);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool RecordFailureAudit(const char *sEventName, const char *sMsg)
{
	return RecordEvent(sEventName, EVENTLOG_AUDIT_FAILURE, MSG_BASIC_INFORMATION, 0, sMsg);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool RecordWarn(const char *sEventName, const char *sMsg)
{
	return RecordEvent(sEventName, EVENTLOG_WARNING_TYPE, MSG_BASIC_WARNING, 0, sMsg);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool RecordError(const char *sEventName, const char *sMsg)
{
	return RecordEvent(sEventName, EVENTLOG_ERROR_TYPE, MSG_BASIC_FAILURE, 0, sMsg);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool RecordInfo(const char *sEventName, const char *sMsg)
{
	return RecordEvent(sEventName, EVENTLOG_INFORMATION_TYPE, MSG_BASIC_INFORMATION, 0, sMsg);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool RecordEvent(const char *sEventName, WORD dwEventType, DWORD dwEventID, WORD wCategory, const char *sMsg)
{
    HANDLE hEventSource = NULL; 

	char *sStrings[1];
	int iStrings = 0;
	bool bResult = true;

    if((hEventSource = RegisterEventSource(NULL, sEventName)) == NULL)
    {
        return false;
    }

	if(*sMsg != NULL)
	{
		iStrings++;
	}

	sStrings[0] = (char *) sMsg;

	if(!ReportEvent(hEventSource, dwEventType, wCategory, dwEventID, NULL, iStrings, 0, (LPCTSTR*) &sStrings[0], NULL))
    {
		bResult = false;
    }

    DeregisterEventSource(hEventSource); 

    return bResult;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif
